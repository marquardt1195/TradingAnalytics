---
title: "Trading Analytics"
author: "Josh Marquardt"
date: "2024-04-06"
output: html_document
---

```{r install, include=FALSE}
```


```{r library, include=FALSE}
library(reactable)
library(dplyr)
library(lubridate)
library(data.table)
library(quantmod)
```

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
rawFidelityData <- read.csv("C:/Users/SUPERUSER/Desktop/Realized_Gain_Loss_Account_Z19598491.csv", na.strings = c("", "NA"))
```


```{r cleanData, include=FALSE}
## Remove wash sales from datasheet
removeWashSales <- subset(rawFidelityData, !grepl("Wash Sale", rawFidelityData$Date.Sold, ignore.case = TRUE))

## Remove random column formatting.. dollar signs, etc.
cleanedData <- removeWashSales %>%
  mutate(Symbol = gsub("\\(.*?\\)", "", Symbol.CUSIP.))%>%
  mutate(
    Cost.Basis = gsub("\\$", "", Cost.Basis, ),
    Proceeds = gsub("\\$", "", Proceeds),
    Short.Term.Gain.Loss = gsub("\\((.*?)\\)", "-\\1", Short.Term.Gain.Loss),
    Short.Term.Gain.Loss = gsub("\\$", "", Short.Term.Gain.Loss),
    Cost.Basis = as.numeric(Cost.Basis),
    Proceeds = as.numeric(Proceeds),
    Date.Acquired = as.Date(Date.Acquired, format = "%m/%d/%Y"),
    Date.Sold = as.Date(Date.Sold, format = "%m/%d/%Y")
  ) %>% 
  select(Symbol, everything(), -Symbol.CUSIP., -Security.Description, -Long.Term.Gain.Loss)
```

```{r grouped trades, include=FALSE}
## Use an arbitrary amount of time (t + 6days) to determine if adding to a trade or new trade..
## If you buy the stock and buy it again within 6 days, it is considered an "add" and defined as the same trade.
addDates <- cleanedData %>% 
  group_by(Symbol) %>% 
  mutate(
    tradeStartDate = as.Date(min(Date.Acquired)),
    addWindow = floor_date(tradeStartDate, "day") + days(6),
    tradeEndDate = max(Date.Sold)
  ) %>% 
  select(Symbol, Quantity, Date.Acquired, Date.Sold, everything()) 

## Use dates to group trades
addStartDate <- addDates %>% 
  mutate(
    transactionType = ifelse(Date.Acquired <= addWindow & Date.Acquired + days(6) >= addWindow, "same_trade", "new_trade"),
    tradeStartDate2 = as.Date(ifelse(transactionType == "new_trade", Date.Acquired, tradeStartDate)),
    buyPrice = Cost.Basis/Quantity,
    sellPrice = Proceeds/Quantity
  ) %>% 
  arrange(Symbol, tradeStartDate2) %>% 
  group_by(Symbol) %>%
  ungroup() %>%
  select(Symbol, Quantity, tradeStartDate2, Date.Acquired, tradeEndDate, Date.Sold, Cost.Basis, Proceeds, buyPrice, sellPrice)

## Add Id's to grouped trades
addIds <- addStartDate %>% 
  mutate(
    Id = cumsum(c(1, diff(data.table::rleid(tradeStartDate2)) != 0))
  ) %>% 
  select(Id, everything())

## Calculate weighted averages for trades
addWeightAvg <- addIds %>%
  group_by(Id) %>% 
  mutate(
    weightAvgBuy = (sum(buyPrice*Quantity)/sum(Quantity)),
    weightAvgSell = (sum(sellPrice*Quantity)/sum(Quantity))
  ) %>% 
  select(-Cost.Basis, -Proceeds, -buyPrice, -sellPrice, -Date.Acquired, -Date.Sold, -Quantity)

## Calculate percent gain or loss per trade
addPercentChange <- addWeightAvg %>% 
  group_by(Id) %>% 
  mutate(
    percentChange = ((weightAvgSell - weightAvgBuy)/weightAvgBuy)*100
  ) %>% 
  distinct(Id, .keep_all = TRUE)

## Store winners and losers
winningTrades <- addPercentChange %>% 
  filter(percentChange > 0)

losingTrades <- addPercentChange %>%
  filter(percentChange < 0)

```

```{r ungrouped trades, include=FALSE}
ungroupedAddSharePrice <- cleanedData %>% 
  mutate(
    ungroupedBuyPrice = Cost.Basis/Quantity,
    ungroupedSellPrice = Proceeds/Quantity
  )

ungroupedAddPercentChange <- ungroupedAddSharePrice %>% 
  mutate(
    ungroupedPercentChange = ((ungroupedSellPrice-ungroupedBuyPrice)/ungroupedBuyPrice)*100
  )

ungroupedWinningTrades <- ungroupedAddPercentChange %>% 
  filter(ungroupedPercentChange > 0)

ungroupedLosingTrades <- ungroupedAddPercentChange %>% 
  filter(ungroupedPercentChange < 0)
```

```{r ungrouped results, include = FALSE}
## Compute total avg gain and avg loss
ungroupedAvgWinPercent <- round(mean(ungroupedWinningTrades$ungroupedPercentChange), 2)
ungroupedAvgLossPercent <- round(mean(ungroupedLosingTrades$ungroupedPercentChange), 2)

## Compute Batting Avg %
ungroupedNumberWinners <- as.numeric(nrow(ungroupedWinningTrades))
ungroupedNumberLosers <- as.numeric(nrow(ungroupedLosingTrades))
ungroupedBattingAvg <- round(ungroupedNumberWinners/(sum(ungroupedNumberWinners, ungroupedNumberLosers))*100, 2)

# Compute Win/Loss ratio
ungroupedWinLossRatio <- abs(round((ungroupedAvgWinPercent/ungroupedAvgLossPercent), 2))
ungroupedAdjustedWinLossRatio <- round(ungroupedWinLossRatio*(ungroupedBattingAvg/100), 2)
```

```{r results, include=FALSE}
## Compute total avg gain and avg loss
avgWinPercent <- round(mean(winningTrades$percentChange), 2)
avgLossPercent <- round(mean(losingTrades$percentChange), 2)

## Compute Batting Avg %
numberWinners <- as.numeric(nrow(winningTrades))
numberLosers <- as.numeric(nrow(losingTrades))
battingAvg <- round(numberWinners/(sum(numberWinners, numberLosers))*100, 2)

## Compute Win/Loss ratio
winLossRatio <- abs(round((avgWinPercent/avgLossPercent), 2))
adjustedWinLossRatio <- round(winLossRatio*(battingAvg/100), 2)
  
```

```{r getYahooFinanceData, include=FALSE}
## Add buy and sell price per share
addSharePrice <- cleanedData %>% 
  mutate(
    buyPrice = Cost.Basis/Quantity,
    sellPrice = Proceeds/Quantity
  )

## Loop through trades and retrieve yahoo finance data of each symbol starting with day stock was purchased
for (i in 1:nrow(addPercentChange)) {
  symbol <- addPercentChange$Symbol[i]
  fromDate <- addPercentChange$tradeStartDate2[i]
  
  getSymbols(symbol, src = "yahoo", from = fromDate, to = toDate)
}




```


```{r, include = FALSE} 

# Custom function to retrieve data for each symbol and merge with original table
retrieveAndMerge <- function(symbol, fromDate, toDate, addPercentChange) {
  # Retrieve data for the symbol
  data <- getSymbols(symbol, src = "yahoo", from = fromDate, to = toDate, auto.assign = FALSE)
  
  # Extract dates from Yahoo Finance data
  yahoo_dates <- index(data)
  
  # Create a data frame with dates and the symbol
  yahoo_data <- data.frame(Date = yahoo_dates, Symbol = symbol, data)
  
  # Merge the original table with the yahoo_data based on Date
  mergedTable <- merge(addPercentChange, yahoo_data, by = "Symbol", all.x = TRUE)
  
  return(mergedTable)
}

# Loop through your table
for (i in 1:length(addPercentChange$Symbol)) {
  symbol <- addPercentChange$Symbol[i]
  fromDate <- addPercentChange$tradeStartDate2[i]
  toDate <- Sys.Date()  # Assuming you want data up to today's date
  
  # Retrieve and merge data for the current symbol
  mergedTable <- retrieveAndMerge(symbol, fromDate, toDate, addPercentChange)
  
  mergedTable <- mergedTable[mergedTable$Symbol == symbol, ]

  
  # Assign the merged table to a variable with a unique name
  assign(paste("merged_", symbol, sep = ""), mergedTable)
}

# Accessing each merged table
for (symbol in addPercentChange$Symbol) {
  mergedTableName <- paste("merged_", symbol, sep = "")
  print(paste("Merged table:", mergedTableName))
  print(head(get(mergedTableName)))
}

```



